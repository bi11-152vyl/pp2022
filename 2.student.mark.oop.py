{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab2NotRunyet.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "GW-FUZjkhy1F"
      },
      "outputs": [],
      "source": [
        "class Student:\n",
        "\n",
        "     def __init__(self, id, name, dob):\n",
        "        self._idst = id\n",
        "        self._namest = name\n",
        "        self._dob = dob\n",
        "\n",
        "     def set_idst(self , id):\n",
        "          self._idst = id\n",
        "     def get_idst(self):\n",
        "          return self._idst\n",
        "\n",
        "     def set_namest(self , name):\n",
        "          self._namest = name\n",
        "     def get_namest(self):\n",
        "          return self._namest\n",
        "      \n",
        "     def set_dob(self , dob):\n",
        "          self._dob = dob\n",
        "     def get_dob(self):\n",
        "          return self._dob\n",
        "\n",
        "     def inputStudentNums(self):\n",
        "      while True:\n",
        "        studentNums = int(input(\"Enter the number of students: \"))\n",
        "        if studentNums>0: break\n",
        "        else:\n",
        "           print(\"Invalid input, please try again!\")\n",
        "        return studentNums\n",
        "\n",
        "     def inputStudentInfo(self, studentNums):\n",
        "         ST =[]\n",
        "         for i in range(studentNums):\n",
        "           print(f\"Enter the student \" + str(i+1) + \" information:\")\n",
        "           idst = input(\"1. ID: \")\n",
        "           namest = input(\"2. Name: \")\n",
        "           dob = input(\"3. DoB: \")\n",
        "           ST.append({\n",
        "              \"Name\": namest,\n",
        "              \"ID\": idst,        \n",
        "              \"DoB\": dob\n",
        "           })\n",
        "         print(ST)\n",
        "         print(f\"{studentNums} student's information is entered successfully!\")\n",
        "         return ST \n",
        "\n",
        "     def ListStudents(self, ST):\n",
        "         print(f\"Listing {len(ST)} students\")\n",
        "         for student in ST:\n",
        "           print(student)\n",
        "\n",
        "\n",
        "#     def set_id(self , id):\n",
        "#          self._idst = id\n",
        "#      def get_id(self):\n",
        "#          return self._idst\n",
        "\n",
        "#      def set_name(self , name):\n",
        "#          self._namest = name\n",
        "#      def get_name(self):\n",
        "#          return self._namest\n",
        "      \n",
        "#      def set_dob(self , dob):\n",
        "#          self._dob = dob\n",
        "#      def get_dob(self):\n",
        "#          return self._dob\n",
        "      \n",
        "#      def Show_info(self):\n",
        "#          print (f\"Student ID: {self.get_id()}\")\n",
        "#          print(f\"Student name:{self._namest}\")\n",
        "#          print(f\"Date of birth: {self._dob}\")\n",
        "      \n",
        "class Courses:\n",
        "\n",
        "      def __init__(self, id, name):\n",
        "        self._idc = id\n",
        "        self._namec = name\n",
        "\n",
        "      def set_idc(self , id):\n",
        "          self._idc = id\n",
        "      def get_idc(self):\n",
        "          return self._idc\n",
        "\n",
        "      def set_namec(self , name):\n",
        "          self._namec = name\n",
        "      def get_namec(self):\n",
        "          return self._namec\n",
        "      \n",
        "      def inputCourseNums(self):\n",
        "        while  True:\n",
        "         courseNums = int(input(\"Enter the number of courses: \"))\n",
        "         if courseNums>0:\n",
        "              break\n",
        "        else:\n",
        "              print(\"Invalid input, please try again!\")\n",
        "        return courseNums\n",
        "\n",
        "      def inputCourseInfo(self, courseNums):\n",
        "          CS =[]\n",
        "          for i in range(courseNums):\n",
        "              print(f\"Enter the course \" + str(i+1) + \" information:\")\n",
        "              idc = input(\"1. IDC: \")\n",
        "              namec = input(\"2. NameC: \")\n",
        "              CS.append({\n",
        "                 \"IDC\": idc,        \n",
        "                 \"NameC\": namec\n",
        "              })\n",
        "          print(CS)\n",
        "          print(f\"{courseNums} course's information is entered successfully!\")\n",
        "          return CS\n",
        "\n",
        "      def ListCourse(self, CS):\n",
        "           print(f\"Listing {len(CS)} courses\")\n",
        "           for course in CS:\n",
        "            print(course)\n",
        "\n",
        "      def courseSelect(self, CS):\n",
        "          c = input(\"Enter the course's ID or the course's name you want to select: \")\n",
        "          for i in range(0, len(CS)):\n",
        "                if c == CS[i]['IDC'] or c == CS[i]['NameC']:\n",
        "                   return('The selected course is:', [CS[i]])\n",
        "                   break\n",
        "                elif i == (len(CS)-1):\n",
        "                   print(\"This course is not in the list, please try again!\")\n",
        "\n",
        "class StudentMark:   \n",
        "\n",
        "      def __init__(self, mcs):\n",
        "        self._mark = mcs\n",
        "\n",
        "      def set_mark(self , mcs):\n",
        "          self._mark = mcs\n",
        "      def get_mark(self):\n",
        "          return self._mark \n",
        "\n",
        "      def inputStudentMarkforCourse(self, ST):\n",
        "         for i in range(len(ST)):\n",
        "          mcs= int(input(\"Enter student's \" + str(i+1) + \" mark: \"))\n",
        "          while True:\n",
        "            if(mcs>=0 and mcs<=20): break\n",
        "            else: print(\"Invalid input, please try again!\")\n",
        "            ST.append({\n",
        "                 \"Student's mark\": mcs\n",
        "            })\n",
        "          print(\"Student's mark is entered successfully!\")\n",
        "          return ST\n",
        "\n",
        "      def showMarks(self, ST):\n",
        "          print(f\"Show student's marks\")\n",
        "          for mark in ST:\n",
        "            print(mark)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "3kiz5Nvb0yLX"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}